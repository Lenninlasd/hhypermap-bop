<?xml version="1.0" encoding="UTF-8" ?>
<schema name="geo_admin" version="1.6">

  <!-- If you remove this field, you must _also_ disable the update log in solrconfig.xml
     or Solr won't start. _version_ and update log are required for SolrCloud
  -->
  <field name="_version_" type="long" indexed="true" stored="false"/>

  <!-- Only remove the "id" field if you have a very good reason to. While not strictly
    required, it is highly recommended. A <uniqueKey> is present in almost all Solr
    installations. See the <uniqueKey> declaration below where <uniqueKey> is set to "id".
    Do NOT change the type and apply index-time analysis to the <uniqueKey> as it will likely
    make routing in SolrCloud and document replacement in general fail. Limited _query_ time
    analysis is possible as long as the indexing process is guaranteed to index the term
    in a compatible way. Any analysis applied to the <uniqueKey> should _not_ produce multiple
    tokens
  -->
  <field name="id" type="string" indexed="true" stored="true" required="true" multiValued="false"/>


  <!-- Field to use to determine and enforce document uniqueness.
       Unless this field is marked with required="false", it will be a required field
    -->
  <uniqueKey>id</uniqueKey>

  <!-- copyField commands copy one field to another at the time a document
        is added to the index.  It's used either to index the same field differently,
        or to add multiple fields to the same field for easier/faster searching.  -->

  <!--
   <copyField source="title" dest="text"/>
   <copyField source="body" dest="text"/>
  -->

  <!-- field type definitions. The "name" attribute is
     just a label to be used by field definitions.  The "class"
     attribute and any other attributes determine the real
     behavior of the fieldType.
       Class names starting with "solr" refer to java classes in a
     standard package such as org.apache.solr.analysis
  -->

  <!-- The StrField type is not analyzed, but indexed/stored verbatim.
     It supports doc values but in that case the field needs to be
     single-valued and either required or have a default value.
    -->
  <fieldType name="string" class="solr.StrField" sortMissingLast="true" docValues="true"/>

  <!-- boolean type: "true" or "false" -->
  <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true"/>

  <!-- sortMissingLast and sortMissingFirst attributes are optional attributes are
       currently supported on types that are sorted internally as strings
       and on numeric types.
     This includes "string","boolean", and, as of 3.5 (and 4.x),
     int, float, long, date, double, including the "Trie" variants.
     - If sortMissingLast="true", then a sort on this field will cause documents
       without the field to come after documents with the field,
       regardless of the requested sort order (asc or desc).
     - If sortMissingFirst="true", then a sort on this field will cause documents
       without the field to come before documents with the field,
       regardless of the requested sort order.
     - If sortMissingLast="false" and sortMissingFirst="false" (the default),
       then default lucene sorting will be used which places docs without the
       field first in an ascending sort and last in a descending sort.
  -->

  <!--
    Default numeric field types. For faster range queries, consider the tint/tfloat/tlong/tdouble types.

    These fields support doc values, but they require the field to be
    single-valued and either be required or have a default value.
  -->
  <fieldType name="int" class="solr.TrieIntField" docValues="true" precisionStep="0"
             positionIncrementGap="0"/>
  <fieldType name="float" class="solr.TrieFloatField" docValues="true" precisionStep="0"
             positionIncrementGap="0"/>
  <fieldType name="long" class="solr.TrieLongField" docValues="true" precisionStep="0"
             positionIncrementGap="0"/>
  <fieldType name="double" class="solr.TrieDoubleField" docValues="true" precisionStep="0"
             positionIncrementGap="0"/>

  <!--
   Numeric field types that index each value at various levels of precision
   to accelerate range queries when the number of values between the range
   endpoints is large. See the javadoc for NumericRangeQuery for internal
   implementation details.

   Smaller precisionStep values (specified in bits) will lead to more tokens
   indexed per value, slightly larger index size, and faster range queries.
   A precisionStep of 0 disables indexing at different precision levels.
  -->
  <fieldType name="tint" class="solr.TrieIntField" docValues="true" precisionStep="8"
             positionIncrementGap="0"/>
  <fieldType name="tfloat" class="solr.TrieFloatField" docValues="true" precisionStep="8"
             positionIncrementGap="0"/>
  <fieldType name="tlong" class="solr.TrieLongField" docValues="true" precisionStep="8"
             positionIncrementGap="0"/>
  <fieldType name="tdouble" class="solr.TrieDoubleField" docValues="true" precisionStep="8"
             positionIncrementGap="0"/>

  <!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and
       is a more restricted form of the canonical representation of dateTime
       http://www.w3.org/TR/xmlschema-2/#dateTime
       The trailing "Z" designates UTC time and is mandatory.
       Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z
       All other components are mandatory.

       Expressions can also be used to denote calculations that should be
       performed relative to "NOW" to determine the value, ie...

             NOW/HOUR
                ... Round to the start of the current hour
             NOW-1DAY
                ... Exactly 1 day prior to now
             NOW/DAY+6MONTHS+3DAYS
                ... 6 months and 3 days in the future from the start of
                    the current day

       Consult the TrieDateField javadocs for more information.

       Note: For faster range queries, consider the tdate type
    -->
  <fieldType name="date" class="solr.TrieDateField" docValues="true" precisionStep="0"
             positionIncrementGap="0"/>

  <!-- A Trie based date field for faster date range queries and date faceting. -->
  <fieldType name="tdate" class="solr.TrieDateField" docValues="true" precisionStep="6"
             positionIncrementGap="0"/>


  <!--Binary data type. The data should be sent/retrieved in as Base64 encoded Strings -->
  <fieldType name="binary" class="solr.BinaryField"/>

  <!-- The "RandomSortField" is not used to store or search any
       data.  You can declare fields of this type it in your schema
       to generate pseudo-random orderings of your docs for sorting
       or function purposes.  The ordering is generated based on the field
       name and the version of the index. As long as the index version
       remains unchanged, and the same field name is reused,
       the ordering of the docs will be consistent.
       If you want different psuedo-random orderings of documents,
       for the same version of the index, use a dynamicField and
       change the field name in the request.
   -->
  <fieldType name="random" class="solr.RandomSortField" indexed="true"/>

  <!-- A general text field that has reasonable, generic
     cross-language defaults: it tokenizes with StandardTokenizer,
  removes stop words from case-insensitive "stopwords.txt"
  (empty by default), and down cases.  At query time only, it
  also applies synonyms. -->
  <fieldType name="text_general" class="solr.TextField" positionIncrementGap="100">
    <analyzer type="index">
      <tokenizer class="solr.StandardTokenizerFactory"/>
      <!--<filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" />-->
      <!-- in this example, we will only use synonyms at query time
      <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
      -->
      <filter class="solr.LowerCaseFilterFactory"/>
    </analyzer>
    <analyzer type="query">
      <tokenizer class="solr.StandardTokenizerFactory"/>
      <!--<filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" />-->
      <!--<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>-->
      <filter class="solr.LowerCaseFilterFactory"/>
    </analyzer>
  </fieldType>

</schema>
