<?xml version="1.0" encoding="UTF-8" ?>

<schema name="bop" version="1.6">

  <!-- Valid attributes for fields:
    name: mandatory - the name for the field
    type: mandatory - the name of a field type from the
      <types> fieldType section
    indexed: true if this field should be indexed (searchable or sortable)
    stored: true if this field should be retrievable
    docValues: true if this field should have doc values. Doc values are
      useful for faceting, grouping, sorting and function queries. Although not
      required, doc values will make the index faster to load, more
      NRT-friendly and more memory-efficient. They however come with some
      limitations: they are currently only supported by StrField, UUIDField
      and all Trie*Fields, and depending on the field type, they might
      require the field to be single-valued, be required or have a default
      value (check the documentation of the field type you're interested in
      for more information)
    multiValued: true if this field may contain multiple values per document
    omitNorms: (expert) set to true to omit the norms associated with
      this field (this disables length normalization and index-time
      boosting for the field, and saves some memory).  Only full-text
      fields or fields that need an index-time boost need norms.
      Norms are omitted for primitive (non-analyzed) types by default.
    termVectors: [false] set to true to store the term vector for a
      given field.
      When using MoreLikeThis, fields used for similarity should be
      stored for best performance.
    termPositions: Store position information with the term vector.
      This will increase storage costs.
    termOffsets: Store offset information with the term vector. This
      will increase storage costs.
    required: The field is required.  It will throw an error if the
      value does not exist
    default: a value that should be used if no value is specified
      when adding a document.
  -->

  <!-- field names should consist of alphanumeric or underscore characters only and
     not start with a digit.  This is not currently strictly enforced,
     but other field names will not have first class support from all components
     and back compatibility is not guaranteed.  Names with both leading and
     trailing underscores (e.g. _version_) are reserved.
  -->

  <!-- If you remove this field, you must _also_ disable the update log in solrconfig.xml
     or Solr won't start. _version_ and update log are required for SolrCloud
     BOP: TODO it'd be nice to enhance Solr to make this optional, with restrictions (e.g. no atomic
     update)
  -->
  <field name="_version_" type="long" indexed="true" stored="false" docValues="true"/>

  <!-- BOP: for tweets this is the unsigned long converted to signed (Solr only does signed)
  -->
  <field name="id" type="long" indexed="true" stored="true" docValues="true"
         required="true" />

  <!-- the tweet text.
   TODO docValues for low-hit-count facet for tag-cloud? but Solr doesn't support DV here yet.
          We should probably use some other field, and then we could filter '@', '#', stopwords etc.
   TODO omit norms? Debatable how relevant it is.-->
  <field name="text" type="text_general"          indexed="true" stored="true" docValues="false"/>

  <!-- use DateRangeField for faster date range search/faceting. To sort, sort by 'id' instead
     which is consistent with timestamp order for tweets. -->
  <field name="created_at" type="date_range_field" indexed="true" stored="true" docValues="false"/>
  <field name="created_at_dv" type="date" indexed="false" stored="false" docValues="true" useDocValuesAsStored="false" />
  <copyField source="created_at" dest="created_at_dv" />


  <field name="minuteOfDayByUserTimeZone" type="int" indexed="true" stored="false" docValues="true" />

  <!-- twitter user screen name. -->
  <field name="user_name" type="string"    indexed="true" stored="true" docValues="true"/>

  <!-- TODO (lang specific search?)-->
  <field name="lang" type="string" indexed="true" stored="true" docValues="true" />

  <!-- for storing (retrieval) lat,lon & sort-by-distance, but not search.
  Note: _coordinate has docValues but not this aggregate -->
  <!--    TODO use Lucene geo3d or Lucene latlontype to sort by distance faster
          (not planned; who will do it?) -->
  <field name="coord" type="geo_latlontype" indexed="false" stored="true"/>

  <!-- we use spatial RPT for filtering and for heatmaps -->
  <field name="coord_rpt" type="geo_rpt_5m"         indexed="true" stored="false"/>
  <copyField source="coord" dest="coord_rpt" />

  <field name="coordSentimentPos_rpt" type="geo_rpt_5m" indexed="true" stored="false"/>
  <!-- URP conditionally copies coord to coordSentimentPos_rpt when sentiment_pos is true -->

  <field name="geoadmin_admin2" type="hierarchy" indexed="true" stored="true" docValues="false" />
  <field name="geoadmin_admin2_txt" type="hierarchy" indexed="true" stored="true" docValues="false" />

  <field name="geoadmin_us_census_tract" type="string" indexed="true" stored="true" docValues="true" />

  <field name="geoadmin_us_ma_census_block" type="string" indexed="true" stored="true" docValues="true" />
  <field name="geoadmin_us_ma_census_block_townName" type="string" indexed="true" stored="true" docValues="true" />

  <dynamicField name="*_count"  type="int" indexed="true"  stored="false" docValues="true" />
  <!-- geoadmin path DV fields -->
  <dynamicField name="*_pathdv" type="string" indexed="false"  stored="false" docValues="true" />


  <field name="sentiment_pos" type="boolean" />

  <!-- TODO plenty of other interesting metadata in tweets. Add hashtags, in-reply-to, etc. -->

  <!-- Field to use to determine and enforce document uniqueness.
       Unless this field is marked with required="false", it will be a required field
    -->
  <uniqueKey>id</uniqueKey>

  <!-- copyField commands copy one field to another at the time a document
        is added to the index.  It's used either to index the same field differently,
        or to add multiple fields to the same field for easier/faster searching.  -->

  <!--
   <copyField source="title" dest="text"/>
   <copyField source="body" dest="text"/>
  -->

  <!-- field type definitions. The "name" attribute is
     just a label to be used by field definitions.  The "class"
     attribute and any other attributes determine the real
     behavior of the fieldType.
       Class names starting with "solr" refer to java classes in a
     standard package such as org.apache.solr.analysis
  -->

  <!-- The StrField type is not analyzed, but indexed/stored verbatim.
     It supports doc values but in that case the field needs to be
     single-valued and either required or have a default value.
    -->
  <fieldType name="string" class="solr.StrField" sortMissingLast="true" docValues="true"/>

  <!-- boolean type: "true" or "false" -->
  <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true"/>

  <!-- sortMissingLast and sortMissingFirst attributes are optional attributes are
       currently supported on types that are sorted internally as strings
       and on numeric types.
     This includes "string","boolean", and, as of 3.5 (and 4.x),
     int, float, long, date, double, including the "Trie" variants.
     - If sortMissingLast="true", then a sort on this field will cause documents
       without the field to come after documents with the field,
       regardless of the requested sort order (asc or desc).
     - If sortMissingFirst="true", then a sort on this field will cause documents
       without the field to come before documents with the field,
       regardless of the requested sort order.
     - If sortMissingLast="false" and sortMissingFirst="false" (the default),
       then default lucene sorting will be used which places docs without the
       field first in an ascending sort and last in a descending sort.
  -->

  <!--
    Default numeric field types. For faster range queries, consider the tint/tfloat/tlong/tdouble types.

    These fields support doc values, but they require the field to be
    single-valued and either be required or have a default value.
  -->
  <fieldType name="int" class="solr.TrieIntField" docValues="true" precisionStep="0"
             positionIncrementGap="0"/>
  <fieldType name="float" class="solr.TrieFloatField" docValues="true" precisionStep="0"
             positionIncrementGap="0"/>
  <fieldType name="long" class="solr.TrieLongField" docValues="true" precisionStep="0"
             positionIncrementGap="0"/>
  <fieldType name="double" class="solr.TrieDoubleField" docValues="true" precisionStep="0"
             positionIncrementGap="0"/>

  <!--
   Numeric field types that index each value at various levels of precision
   to accelerate range queries when the number of values between the range
   endpoints is large. See the javadoc for NumericRangeQuery for internal
   implementation details.

   Smaller precisionStep values (specified in bits) will lead to more tokens
   indexed per value, slightly larger index size, and faster range queries.
   A precisionStep of 0 disables indexing at different precision levels.
  -->
  <fieldType name="tint" class="solr.TrieIntField" docValues="true" precisionStep="8"
             positionIncrementGap="0"/>
  <fieldType name="tfloat" class="solr.TrieFloatField" docValues="true" precisionStep="8"
             positionIncrementGap="0"/>
  <fieldType name="tlong" class="solr.TrieLongField" docValues="true" precisionStep="8"
             positionIncrementGap="0"/>
  <fieldType name="tdouble" class="solr.TrieDoubleField" docValues="true" precisionStep="8"
             positionIncrementGap="0"/>

  <!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and
       is a more restricted form of the canonical representation of dateTime
       http://www.w3.org/TR/xmlschema-2/#dateTime
       The trailing "Z" designates UTC time and is mandatory.
       Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z
       All other components are mandatory.

       Expressions can also be used to denote calculations that should be
       performed relative to "NOW" to determine the value, ie...

             NOW/HOUR
                ... Round to the start of the current hour
             NOW-1DAY
                ... Exactly 1 day prior to now
             NOW/DAY+6MONTHS+3DAYS
                ... 6 months and 3 days in the future from the start of
                    the current day

       Consult the TrieDateField javadocs for more information.

       Note: For faster range queries, consider the tdate type
    -->
  <fieldType name="date" class="solr.TrieDateField" docValues="true" precisionStep="0"
             positionIncrementGap="0"/>

  <!-- A Trie based date field for faster date range queries and date faceting. -->
  <fieldType name="tdate" class="solr.TrieDateField" docValues="true" precisionStep="6"
             positionIncrementGap="0"/>

  <!-- for indexed ranges, but also is a decent substitute for TrieDateField -->
  <fieldType name="date_range_field" class="solr.DateRangeField" />


  <!--Binary data type. The data should be sent/retrieved in as Base64 encoded Strings -->
  <fieldType name="binary" class="solr.BinaryField"/>

  <!-- The "RandomSortField" is not used to store or search any
       data.  You can declare fields of this type it in your schema
       to generate pseudo-random orderings of your docs for sorting
       or function purposes.  The ordering is generated based on the field
       name and the version of the index. As long as the index version
       remains unchanged, and the same field name is reused,
       the ordering of the docs will be consistent.
       If you want different psuedo-random orderings of documents,
       for the same version of the index, use a dynamicField and
       change the field name in the request.
   -->
  <fieldType name="random" class="solr.RandomSortField" indexed="true"/>

  <!-- solr.TextField allows the specification of custom text analyzers
       specified as a tokenizer and a list of token filters. Different
       analyzers may be specified for indexing and querying.

       The optional positionIncrementGap puts space between multiple fields of
       this type on the same document, with the purpose of preventing false phrase
       matching across fields.

       For more info on customizing your analyzer chain, please see
       http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters
   -->

  <!-- One can also specify an existing Analyzer class that has a
       default constructor via the class attribute on the analyzer element.
       Example:
  <fieldType name="text_greek" class="solr.TextField">
    <analyzer class="org.apache.lucene.analysis.el.GreekAnalyzer"/>
  </fieldType>
  -->

  <!-- A text field that only splits on whitespace for exact matching of words -->
  <fieldType name="text_ws" class="solr.TextField" positionIncrementGap="100">
    <analyzer>
      <tokenizer class="solr.WhitespaceTokenizerFactory"/>
    </analyzer>
  </fieldType>

  <!-- BOP: general cross-language text, but adapted for tweets
    TODO strip URLs, substitute with stop-word (thus pos inc gap) *OR* treat as 1 token
    TODO handle '@' and '#' specially (via WDF?)
    TODO solr.ICUFoldingFilterFactory  (may subsume LowerCaseFilter BTW)
    TODO stopwords all single letters & numbers?
    TODO common-gram the stop-words?
    TODO english minimal stemmer? (even though not necessarily english)
    TODO remove apostrophe-s ? (even though not necessarily english) -->
  <fieldType name="text_general" class="solr.TextField" positionIncrementGap="100">
    <analyzer type="index">
      <tokenizer class="solr.StandardTokenizerFactory"/>
      <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
      <filter class="solr.LowerCaseFilterFactory"/>
    </analyzer>
    <analyzer type="query">
      <tokenizer class="solr.StandardTokenizerFactory"/>
      <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
      <filter class="solr.LowerCaseFilterFactory"/>
    </analyzer>
  </fieldType>

  <!-- A text field with defaults appropriate for English: it
       tokenizes with StandardTokenizer, removes English stop words
       (lang/stopwords_en.txt), down cases, protects words from protwords.txt, and
       finally applies Porter's stemming.  The query time analyzer
       also applies synonyms from synonyms.txt. -->
  <fieldType name="text_en" class="solr.TextField" positionIncrementGap="100">
    <analyzer type="index">
      <tokenizer class="solr.StandardTokenizerFactory"/>
      <!-- in this example, we will only use synonyms at query time
      <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
      -->
      <!-- Case insensitive stop word removal.
      -->
      <filter class="solr.StopFilterFactory"
              ignoreCase="true"
              words="lang/stopwords_en.txt"
      />
      <filter class="solr.LowerCaseFilterFactory"/>
      <filter class="solr.EnglishPossessiveFilterFactory"/>
      <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
      <!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
            <filter class="solr.EnglishMinimalStemFilterFactory"/>
      -->
      <filter class="solr.PorterStemFilterFactory"/>
    </analyzer>
    <analyzer type="query">
      <tokenizer class="solr.StandardTokenizerFactory"/>
      <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true"
              expand="true"/>
      <filter class="solr.StopFilterFactory"
              ignoreCase="true"
              words="lang/stopwords_en.txt"
      />
      <filter class="solr.LowerCaseFilterFactory"/>
      <filter class="solr.EnglishPossessiveFilterFactory"/>
      <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
      <!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
            <filter class="solr.EnglishMinimalStemFilterFactory"/>
      -->
      <filter class="solr.PorterStemFilterFactory"/>
    </analyzer>
  </fieldType>

  <!-- lowercases the entire field value, keeping it as a single token.  -->
  <fieldType name="lowercase" class="solr.TextField" positionIncrementGap="100">
    <analyzer>
      <tokenizer class="solr.KeywordTokenizerFactory"/>
      <filter class="solr.LowerCaseFilterFactory"/>
    </analyzer>
  </fieldType>

  <!-- since fields of this type are by default not stored or indexed,
       any data added to them will be ignored outright.  -->
  <fieldType name="ignored" stored="false" indexed="false" docValues="false" multiValued="true"
             class="solr.StrField"/>

  <!-- This point type indexes the coordinates as separate fields (subFields)
    If subFieldType is defined, it references a type, and a dynamic field
    definition is created matching *___<typename>.  Alternately, if
    subFieldSuffix is defined, that is used to create the subFields.
    Example: if subFieldType="double", then the coordinates would be
      indexed in fields myloc_0___double,myloc_1___double.
    Example: if subFieldSuffix="_d" then the coordinates would be indexed
      in fields myloc_0_d,myloc_1_d
    The subFields are an implementation detail of the fieldType, and end
    users normally should not need to know about them.
   -->
  <fieldType name="point" class="solr.PointType" dimension="2" subFieldSuffix="_d"/>

  <!-- A specialized field for geospatial search. If indexed, this fieldType must not be multivalued. -->
  <!--    use float as it's good enough; couple meters? -->
  <fieldType name="geo_latlontype" class="solr.LatLonType" subFieldSuffix="_coordinate"/>
  <dynamicField name="*_coordinate"  type="tfloat" indexed="true" stored="false" useDocValuesAsStored="false" />

  <!-- An alternative geospatial field type new to Solr 4.  It supports multiValued and polygon shapes.
    For more information about this and other Spatial fields new to Solr 4, see:
    http://wiki.apache.org/solr/SolrAdaptersForLuceneSpatial4
  -->
  <!-- BOP: Optimized for heatmaps, and we use it for filtering too (although we'd like to use new
  Lucene stuff instead for filtering once there are Solr adapters).
  For more heatmap resolution choices we use a quad tree.  To make the cells square, we use a
  square worldBounds (although now we can't span the dateline since this necessitates geo=false).
  Once FlexPrefixTree is available, we needn't set geo=false, and we can have fewer levels at the
  top especially to save space.  5 meter precision (specified in units of degrees).
   TODO want FlexPrefixTree when it's ready -->
  <fieldType name="geo_rpt_5m" class="solr.SpatialRecursivePrefixTreeFieldType"
             geo="false" worldBounds="ENVELOPE(-180, 180, 180, -180)" prefixTree="packedQuad"
             distErrPct="0.025" maxDistErr="0.000045" distanceUnits="degrees" />

  <fieldType name="hierarchy"  class="solr.TextField" omitNorms="true">
    <analyzer type="index">
      <tokenizer class="solr.PathHierarchyTokenizerFactory" />
    </analyzer>
    <analyzer type="query">
      <tokenizer class="solr.KeywordTokenizerFactory" />
    </analyzer>
  </fieldType>

  <dynamicField name="*_i"  type="int"    indexed="true"  stored="true"/>
  <dynamicField name="*_is" type="int"    indexed="true"  stored="true"  multiValued="true"/>
  <dynamicField name="*_s"  type="string"  indexed="true"  stored="true" />
  <dynamicField name="*_ss" type="string"  indexed="true"  stored="true" multiValued="true"/>
  <dynamicField name="*_l"  type="long"   indexed="true"  stored="true"/>
  <dynamicField name="*_ls" type="long"   indexed="true"  stored="true"  multiValued="true"/>
  <dynamicField name="*_t"  type="text_general"    indexed="true"  stored="true"/>
  <dynamicField name="*_txt" type="text_general"   indexed="true"  stored="true" multiValued="true"/>
  <dynamicField name="*_en"  type="text_en"    indexed="true"  stored="true" multiValued="true"/>
  <dynamicField name="*_b"  type="boolean" indexed="true" stored="true"/>
  <dynamicField name="*_bs" type="boolean" indexed="true" stored="true"  multiValued="true"/>
  <dynamicField name="*_f"  type="float"  indexed="true"  stored="true"/>
  <dynamicField name="*_fs" type="float"  indexed="true"  stored="true"  multiValued="true"/>
  <dynamicField name="*_d"  type="double" indexed="true"  stored="true"/>
  <dynamicField name="*_ds" type="double" indexed="true"  stored="true"  multiValued="true"/>

</schema>
